generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id              Int           @id @default(autoincrement())
  name            String
  email           String
  phone           String
  startDate       DateTime
  endDate         DateTime
  guests          Int
  createdAt       DateTime      @default(now())
  accommodationId Int
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
}

model Volunteer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Accommodation {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  price       Float
  guests      Int
  createdAt   DateTime          @default(now())
  type        AccommodationType
  bookings    Booking[]
  pictures    Picture[]         @relation("AccommodationPictures")
}

model Picture {
  id              Int            @id @default(autoincrement())
  url             String
  accommodationId Int?
  isPrimary       Boolean
  caption         String?
  altText         String?
  accommodation   Accommodation? @relation("AccommodationPictures", fields: [accommodationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AccommodationType {
  DORM
  PRIVATE
  SUITE
  CABIN
  TENT
  OTHER
}
